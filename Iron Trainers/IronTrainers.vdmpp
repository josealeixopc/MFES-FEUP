class IronTrainers
types
	public String = seq of char;
	
	public Date:: 
	day : nat1
	month: nat1
	year : nat
	inv d == d.month > 0 and d.month <= 12 
		and d.day > 0 and d.day <= 31
		and d.year > 1900;
	
values
	private static currentDate = mk_Date(3, 1, 2018);

instance variables
	clients : set of Client;
	trainers : set of Trainer;
	allUsers : set of String;
	
operations

	public IronTrainers : () ==> IronTrainers
	IronTrainers() == (
		clients := {};
		trainers := {};
		allUsers := {};
	);
	
	/*
	*	A 'pure' operation is an operation which does no affect the state of its object nor of any other. It is referentially transparent.
	* A 'read-only' operation, such as a getter, can be considered pure.
	* Making a getter 'pure' is the only way to keep instance variables private and also use their value on pre/post-conditions.
	*/
	
	-- Returns all users
	pure public getAllUsers : () ==> set of String
	getAllUsers() == return allUsers;
	
	-- Returns all registered clients
	pure public getClients : () ==> set of Client
	getClients() == return clients;
	
	-- Returns all trainers
	pure public getTrainers : () ==> set of Trainer
	getTrainers() == return trainers;

	-- Adds client to registered clients. If can't add client, it returns false
	public addClient : Client ==> ()
	addClient(client) == (
		clients := clients union {client};
		allUsers := allUsers union {client.getEmail()};
	)
	pre client not in set clients and client.getEmail() not in set allUsers
	post client in set clients;
		
	-- Removes client from registered clients
	public removeClient : Client ==> ()
	removeClient(client) == (
		clients := clients \ {client};
		allUsers := allUsers \ {client.getEmail()}
	)
	pre client in set clients and client.getEmail() in set allUsers
	post client not in set clients;
		
	-- Adds trainer to trainers. If can't add trainer, it returns false
	public addTrainer : Trainer ==> ()
	addTrainer(trainer) == (
		trainers := trainers union {trainer};
		allUsers := allUsers union {trainer.getEmail()};
	)
	pre trainer not in set trainers and trainer.getEmail() not in set allUsers
	post trainer in set trainers;
		
	-- Removes trainer from trainers
	public removeTrainer : Trainer ==> ()
	removeTrainer(trainer) ==
	(
		trainers := trainers \ {trainer};
		allUsers := allUsers \ {trainer.getEmail()};
	)
	pre ({trainer} subset trainers) = true and trainer.getEmail() in set allUsers
	post ({trainer} subset trainers) = false;
	
	public static getCurrentDate: () ==> Date
	getCurrentDate() ==
	(
		return currentDate;
	);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end IronTrainers