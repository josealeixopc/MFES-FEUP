class IronTrainersTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	
	e1 : IronTrainers := new IronTrainers();
	
operations

	private testConstructor: () ==> ()
	testConstructor() == 
	(
		assertEquals(e1.getClients(), {});
		assertEquals(e1.getTrainers(), {});
		
	);
	
	private testClient: () ==> ()
	testClient() == 
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		dcl testGender : Client`Sex := <F>;
		dcl testWeight: real := 65.0;
		dcl testHeight: int := 180;
		dcl testBirthDate: Utils`Date := mk_Utils`Date(2, 3, 1980);
		
		dcl c1 : Client := new Client(testEmail, testPassword, testName, testGender, testWeight, testHeight, testBirthDate);
		
		e1.addClient(c1);
		
		assertEquals(e1.getClients(), {c1});
		assertEquals(e1.getAllUsers(), {c1.getEmail()});
		
		e1.removeClient(c1);
		
		assertEquals(e1.getClients(), {});
		assertEquals(e1.getAllUsers(), {});
		
	);
	
	private testTrainer: () ==> ()
	testTrainer() == 
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		
		dcl t1 : Trainer := new Trainer(testEmail, testPassword, testName);
		
		e1.addTrainer(t1);
		
		assertEquals(e1.getTrainers(), {t1});
		assertEquals(e1.getAllUsers(), {t1.getEmail()});
		
		e1.removeTrainer(t1);
		
		assertEquals(e1.getTrainers(), {});
 		assertEquals(e1.getAllUsers(), {});
		
	);
	
	private testClientLoginLogout: () ==> ()
	testClientLoginLogout() == 
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		dcl testGender : Client`Sex := <F>;
		dcl testWeight: real := 65.0;
		dcl testHeight: int := 180;
		dcl testBirthDate: Utils`Date := mk_Utils`Date(2, 3, 1980);
		
		dcl c1 : Client := new Client(testEmail, testPassword, testName, testGender, testWeight, testHeight, testBirthDate);
		
		e1.addClient(c1);
		
		-- Login
		assertEquals(e1.login(testEmail), true);
		assertEquals(e1.getUser(), testEmail);
		assertEquals(e1.getCurrentClient(), c1);
		
		-- Logout
		e1.logout();
		assertEquals(e1.getUser(), "undefined");
	);
	
	private testTrainerLoginLogout: () ==> ()
	testTrainerLoginLogout() == 
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		
		dcl t1 : Trainer := new Trainer(testEmail, testPassword, testName);
		
		e1.addTrainer(t1);
		
		-- Login
		assertEquals(e1.login(testEmail), true);
		assertEquals(e1.getUser(), testEmail);
		
		-- Logout
		e1.logout();
		assertEquals(e1.getUser(), "undefined");
	);
	
	private testNotRegisterLoginLogout: () ==> ()
	testNotRegisterLoginLogout() == 
	(
		dcl testEmail: seq of char := "testEmail";
		
		-- Login
		assertEquals(e1.login(testEmail), false);
		assertEquals(e1.getUser(), "undefined");
		
		-- Logout
		e1.logout();
		assertEquals(e1.getUser(), "undefined");
	);
	
	private testDuplicateTrainerEmails: () ==> ()
	testDuplicateTrainerEmails() ==
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		
		dcl t1 : Trainer := new Trainer(testEmail, testPassword, testName);
		dcl t2 : Trainer := new Trainer(testEmail, testPassword, testName);
		
		e1.addTrainer(t1);
		e1.addTrainer(t2);
	);

	private testDuplicateUserEmails: () ==> ()
	testDuplicateUserEmails() ==
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		dcl testGender : Client`Sex := <F>;
		dcl testWeight: real := 65.0;
		dcl testHeight: int := 180;
		dcl testBirthDate: Utils`Date := mk_Utils`Date(2, 3, 1980);
		
		dcl c1 : Client := new Client(testEmail, testPassword, testName, testGender, testWeight, testHeight, testBirthDate);
		
		dcl t1 : Trainer := new Trainer(testEmail, testPassword, testName);
		
		e1.addTrainer(t1);
		e1.addClient(c1);
	);
	
	private testCurrentYear: () ==> ()
	testCurrentYear() ==
	(
		assertEquals(Utils`getCurrentDate(), mk_Utils`Date(3, 1, 2018));
	);
	
	private testMilestone: () ==> ()
	testMilestone() == 
	(
		dcl testEmail: seq of char := "testEmail";
		dcl testPassword: seq of char := "testPassword";
		dcl testName: seq of char := "testName";
		dcl testGender : Client`Sex := <F>;
		dcl testWeight: real := 65.0;
		dcl testHeight: int := 180;
		dcl testBirthDate: Utils`Date := mk_Utils`Date(2, 3, 1980);
		
		dcl testDesiredWeight: real := 60.0;
		
		dcl c1 : Client := new Client(testEmail, testPassword, testName, testGender, testWeight, testHeight, testBirthDate);
		
		--dcl m1 : Milestone := new Milestone(testDesiredWeight);
		
		e1.addClient(c1);
		
		assertEquals(e1.login(testEmail), true);
		
		-- Update Milestone
		e1.updateDesiredWeight(testDesiredWeight);
		assertEquals(e1.getCurrentClient(), c1);
		assertEquals(e1.consultMilestone(e1.getUser()).getDesiredWeight(), testDesiredWeight);

	);
	
	private testExercise: () ==> ()
	testExercise() == 
	(
		dcl testName: Utils`MyString := "Running";
		dcl testDescription: Utils`MyString := "Running";
		dcl testBodyPart1: Exercise`BodyPart := <Leg>;
		dcl testBodyPart2: Exercise`BodyPart := <Arm>;
		dcl testBodyPart3: Exercise`BodyPart := <Chest>;
		dcl testBodyPart4: Exercise`BodyPart := <Back>;
		
		dcl ex1 : Exercise := new Exercise(testName, testDescription, testBodyPart1);
		dcl ex2 : Exercise := new Exercise(testName, testDescription, testBodyPart2);
		dcl ex3 : Exercise := new Exercise(testName, testDescription, testBodyPart3);
		dcl ex4 : Exercise := new Exercise(testName, testDescription, testBodyPart4);
		
		-- Add exercises
		e1.addExercise(ex1);
		assertEquals(e1.getExercises(), {ex1});
		
		e1.addExercise(ex2);
		assertEquals(e1.getExercises(), {ex1, ex2});
		
		e1.addExercise(ex3);
		assertEquals(e1.getExercises(), {ex1, ex2, ex3});
		
		e1.addExercise(ex4);
		assertEquals(e1.getExercises(), {ex1, ex2, ex3, ex4});
		
		-- Remove exercises
		e1.removeExercise(ex4);
		assertEquals(e1.getExercises(), {ex1, ex2, ex3});
		
		e1.removeExercise(ex3);
		assertEquals(e1.getExercises(), {ex1, ex2});
		
		e1.removeExercise(ex2);
		assertEquals(e1.getExercises(), {ex1});
		
		e1.removeExercise(ex1);
		assertEquals(e1.getExercises(), {});
		
		-- TODO Add failures?
	);
	
	public static run: () ==> ()
 	run() ==
 	(
 		new IronTrainersTest().testConstructor();
 		new IronTrainersTest().testClient();
 		new IronTrainersTest().testTrainer();
 		new IronTrainersTest().testCurrentYear();
 		new IronTrainersTest().testClientLoginLogout();
 		new IronTrainersTest().testTrainerLoginLogout();
 		new IronTrainersTest().testMilestone();
 		new IronTrainersTest().testExercise();
 		
 		--new IronTrainersTest().testNotRegisterLoginLogout();
 		--new IronTrainersTest().testDuplicateTrainerEmails();
 		--new IronTrainersTest().testDuplicateUserEmails();
 	);
 	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end IronTrainersTest